Passos iniciais para gerar o projeto "primeira-api":
- npm init -y => cria um arquivo package.json com as configs iniciais
- npm start => executa o projeto depois de configurar o script no package.json

Passos iniciais para gerar o projeto "api-node-typescript":
- npm init -y => cria um arquivo package.json com as configs iniciais

- npm i typescript --save-dev => instala o typescript como dependência de desenvolvimento

- npm i express --save => instala o express

- npm i @types/express --save-dev => instala a tipagem associada ao express como dependência de desenvolvimento

- npx tsc --init => inicializa a configuração do typescript no projeto criando o arquivo tsconfig.json
    - dentro do arquivo tsconfig.json, fazer as seguintes configurações:
        - descomentar o "outDir" e deixar dessa forma: "outDir": "./dist"
            - pasta dist => serão gerados os arquivos js compilados do typescript e colocados na pasta dist
        - descomentar o "rootDir" e deixar dessa forma: "rootDir": "./src"

- npx tsc => comando para compilar o typescript

- npm i ts-node-dev --save-dev => biblioteca para gerar o build em ambiente de dev
    - ir no arquivo package.json e criar um script de dev para rodar o projeto
    - "dev": "ts-node-dev --inspect --ignore-watch node_modules src/server.ts"
        - inspect => inspeciona cada mudança
        - ignore-watch node_modules => ignora a pasta node_modules
        - src/server.ts => aguarda as mudanças do arquivo server.ts

- npm i knex --save => instala o pacote do Knex.Js, um SQL query builder

- npm i sqlite3 => pacote para utilizar o banco SQLite3
    - criar uma pasta chamada "database" para configurar a conexão como banco e suas migrations
    - criar o arquivo "knexfile.ts" na raiz do projeto para rodar a conexão e a migration
    - criar um comando para rodar as migrations
        - exemplo: "knex:migrate": "knex --knexfile knexfile.ts migrate:latest"
        - npm run knex:migrate

- npx knex --knexfile knexfile.ts migrate:latest => cria o banco de dados
    - para verificar se criou o banco é necessário instalar uma extensão no vscode chamada SQLite
    - shift + ctrl + p => e digitar "open database"
    - escolher o banco 
    - pode também criar um comando no package.json para rodar o script do knex
        - exemplo: "knex:migrate": "knex --knexfile knexfile.ts migrate:latest"
        - npm run knex:migrate

- npm i cors => instala o pacote de controle de Cors na api
- npm i --save-dev @types/cors => instala o pacote de tipagem do multer do Cors

- npm i multer => pacote responsável pelo o upload de arquivos
- npm i --save-dev @types/multer => instala o pacote de tipagem do multer

- npm i celebrate => pacote que aplica um middleware para validação dos dados nas requisições
    - dentro do pacote é utilizado a biblioteca Joi de validação
    - ela que é a responsável por atribuir métodos de validação dos dados
    - https://joi.dev/

- npm i bcryptjs => pacote utilizado para criptografar strings
- npm i --save-dev @types/bcryptjs => instala os tipos referentes ao pacote

- npm i jsonwebtoken => pacote para implementação do JWT (Json web token)
- npm i --save-dev @types/jsonwebtoken => instala os tipos referentes ao pacote

Observações:

Seeds
- recurso disponibilizado pelo Knex para popular as tabelas com informações com um único comando
    - criar uma pasta "seeds", e dentro dela criar um arquivo para inserir os dados mockados na tabela
    - ir no knexfile e configurar o diretório dos arquivos de seeds
    - comando para rodar a seed: knex --knexfile knexfile.ts seed:run
    - pode também criar um comando no package.json para rodar o script
        - exemplo: "knex:seed": "knex --knexfile knexfile.ts seed:run"
        - npm run knex:seed

Parâmetros de requisições 
- Query params
    - exemplo: http://localhost:3333/projects?title=Node&owner=Aluizio
        - primeira propriedade => title = Node
        - segunda propriedade => owner = Aluizio
    - a partir do ponto "?" serão lidos os parâmetros requisitados
    - o "&" permite passar mais parâmetros
    - "request.query" => propriedades utilizadas para ler os parâmetros da query

- Route params
    - utilizados em put, patch e delete
    - exemplo de query params:
        - /projects/:id
        - http://localhost:3333/projects/10

    - exemplo com N parâmetros:
        - /projects/:id/owner/:owner_id
        - http://localhost:3333/projects/10/owner/2

Desestruturação
- pega apenas a propriedade requisitada
    - Exemplo: const { title } = request.query;
        - nesse caso, a query é = { title: 'Node', owner: 'Aluizio' }
        - resultado => const title = 'Node';

Middleware
- interceptador de requisições
- ele pode interromper uma requisição ou pode alterar dados antes de prosseguir para uma requisição
- um Middleware contém request, response, next;
    - next permite a continuação para um próximo método ou requisição
- formas de ativação do Middleware
    - app.use(nomeDoMiddleware) => ativa o Middleware para todas as rotas da api
    - app.get('/projects', nomeDoMiddleware, (request, response) => ativa o Middleware apenas para uma rota específica